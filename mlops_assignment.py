# -*- coding: utf-8 -*-
"""MLops_Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cQ4kwaQ1ZaBtEG53ui5wsccmBB3Lm5Av
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
#

import torch
from torchvision import models

resnet_model = models.resnet50(pretrained=True)
torch.save(resnet_model.state_dict(), 'resnet50.pth')

!pip install gradio

import torchvision.transforms as transforms
from PIL import Image
import gradio as gr

resnet_model = models.resnet50()
resnet_model.load_state_dict(torch.load('resnet50.pth'))
resnet_model.eval()

import torch
from torchvision import transforms
from PIL import Image
import gradio as gr

# Load the ImageNet labels from a text file
with open("/content/imagenet-classes.txt") as f:
    labels = [line.strip() for line in f.readlines()]

# Define the image preprocessing function
def preprocess(image_path):
    transform = transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
    ])
    image = Image.open(image_path).convert("RGB")
    image = transform(image).unsqueeze(0)
    return image

# Define the prediction function
def predict(image_path):
    image = preprocess(image_path)
    with torch.no_grad():
        outputs = resnet_model(image)
    _, predicted = torch.max(outputs, 1)
    label = labels[predicted.item()]
    return label

# Create the Gradio interface
demo = gr.Interface(
    fn=predict,
    inputs=gr.Image(type="filepath"),
    outputs=gr.Textbox()
)

# Launch the Gradio interface
demo.launch()

